import logging
import os
import sys

import requests
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    Filters,
    MessageHandler,
    Updater,
)

load_dotenv("tokens.env")

KINOPOISK_TOKEN = os.getenv('KINOPOISK_TOKEN')
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

HELP_COMMAND = """
<b>/start</b> - <em>–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞</em>
<b>/help</b> - <em>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</em>
<b>/findfilm</b> - <em>–ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª –∏—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π</em>
<b>/randomfilm</b> - <em>–ê–±—Å–æ–ª—é—Ç–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∏–ª—å–º</em>
"""

CONTENT_TYPES = {
    'animated-series': '–º—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª',
    'anime': '–∞–Ω–∏–º–µ',
    'cartoon': '–º—É–ª—å—Ç—Ñ–∏–ª—å–º',
    'movie': '—Ñ–∏–ª—å–º',
    'tv-series': '—Å–µ—Ä–∏–∞–ª'
}


FIRST, SECOND = range(2)


HEADERS = {'X-API-KEY': f'{KINOPOISK_TOKEN}'}
URL = 'https://api.kinopoisk.dev/v1.4/movie/random?notNullFields=name&notNullFields=description&notNullFields=type&notNullFields=year&notNullFields=movieLength'


def start(update, context):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    name = update.message.chat.first_name
    chat = update.effective_chat
    buttons = ReplyKeyboardMarkup(
        [['/findfilm'], ['/randomfilm'], ['/help']],
        resize_keyboard=True)
    context.bot.send_message(
        chat_id=chat.id,
        text='‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–∫–ª—é—á–∏–ª–∏ –º–µ–Ω—è, {} !\n'
        '‚ùî –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help '.format(name),
        reply_markup=buttons
        )


def help(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞."""
    chat = update.effective_chat
    context.bot.send_message(
        chat_id=chat.id,
        text=HELP_COMMAND,
        parse_mode='HTML'
    )


def echo(update, context):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text='–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'
        )


def translate_film_type(type):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–µ."""
    return CONTENT_TYPES.get(type, type)


def create_kinopoisk_link(type, genre):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ —é–∑–µ—Ä–æ–≤."""
    payload = {
        'type': type,
        'genres.name': genre,
    }
    return requests.get(URL, params=payload, headers=HEADERS).json()


def generate_film_info(film_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ –æ—Ç API –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞."""
    genre_names = [genre.get("name") for genre in film_data.get("genres", [])]
    kp_rating = film_data.get("rating", {}).get("kp")
    imdb_rating = film_data.get("rating", {}).get("imdb")
    imdb_id = film_data.get("externalId").get("imdb") if "imdb" in film_data.get("externalId") else None
    film_info = (
        f'<b>{film_data.get("name")}</b>\n'
        '\n'
        f'<a href="https://www.kinopoisk.ru/film/{film_data.get("id")}">–ö–∏–Ω–æ–ø–æ–∏—Å–∫: {kp_rating}</a>\n'
        f'<a href="https://www.imdb.com/title/{film_data.get("externalId").get("imdb")}">IMDB: {imdb_rating}</a>\n'
        '\n'
        f'<i>–¢–∏–ø:</i> {translate_film_type(film_data.get("type"))}\n'
        f'<i>–ñ–∞–Ω—Ä:</i> {", ".join(genre_names)}\n'
        f'<i>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</i> {film_data.get("movieLength")} –º–∏–Ω\n'
        f'<i>–ì–æ–¥:</i> {film_data.get("year")}\n'
        '\n'
        f'{film_data.get("description")}\n'
    )
    return film_info


def get_random_film(update, context, genre=None, type=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–∞–Ω–¥–æ–º–Ω–æ–º —Ñ–∏–ª—å–º–µ."""
    chat = update.effective_chat
    context.bot.send_message(
        chat_id=chat.id,
        text='–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫–æ–π —Ñ–∏–ª—å–º —è —Ç–µ–±–µ –Ω–∞—à—ë–ª',
        )
    payload = {
        'type': type,
        'genres.name': genre,
    }
    film_data = requests.get(
        URL, params=payload if payload else None, headers=HEADERS
        ).json()

    if film_data:
        photo_url = film_data.get('poster', {}).get('previewUrl', None)
        film_info = generate_film_info(film_data)
        if photo_url:
            context.bot.send_photo(
                chat.id, photo_url, caption=film_info, parse_mode='HTML'
            )
        else:
            context.bot.send_message(chat.id, film_info, parse_mode='HTML')
    else:
        context.bot.send_message(
            chat.id,
            '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        )


def start_conversation(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∫ API."""
    user = update.message.from_user
    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –Ω–∞—á–∞–ª –±–µ—Å–µ–¥—É.')
    keyboard = [
        [
            InlineKeyboardButton('–§–∏–ª—å–º', callback_data='movie'),
            InlineKeyboardButton('–°–µ—Ä–∏–∞–ª', callback_data='tv-series'),
        ],
        [
            InlineKeyboardButton('–ú—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª', callback_data='animated-series'),
            InlineKeyboardButton('–ú—É–ª—å—Ñ–∏–ª—å–º', callback_data='cartoon'),
            ],
        [
            InlineKeyboardButton('–ê–Ω–∏–º–µ', callback_data='anime'),
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        '–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä–µ–º —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ üòé, –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–µ–º —Ç–∏–ø:',
        reply_markup=reply_markup)
    return FIRST


def choose_genre(update, context):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∂–∞–Ω—Ä –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    query = update.callback_query
    query.answer()
    type = query.data
    context.user_data['type'] = type
    keyboard = [
        [
            InlineKeyboardButton('–ö–æ–º–µ–¥–∏—è', callback_data='–∫–æ–º–µ–¥–∏—è'),
            InlineKeyboardButton('–ë–æ–µ–≤–∏–∫', callback_data='–±–æ–µ–≤–∏–∫'),
        ],
        [
            InlineKeyboardButton('–í–µ—Å—Ç–µ—Ä–Ω', callback_data='–≤–µ—Å—Ç–µ—Ä–Ω'),
            InlineKeyboardButton('–î–µ—Ç–µ–∫—Ç–∏–≤', callback_data='–¥–µ—Ç–µ–∫—Ç–∏–≤'),
            ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text(
        '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:',
        reply_markup=reply_markup
    )
    return SECOND


def get_filtered_film(update, context):
    query = update.callback_query
    query.answer()
    genre = query.data
    context.user_data['genre'] = genre
    get_random_film(update=update,
                    context=context,
                    genre=context.user_data["genre"],
                    type=context.user_data["type"])
    return ConversationHandler.END


def cancel(update, context):
    update.message.from_user
    update.message.reply_text('Bye! I hope we can talk again some day.')
    return ConversationHandler.END


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    updater = Updater(token=TELEGRAM_TOKEN)
    dispatcher = updater.dispatcher

    start_handler = CommandHandler('start', start)
    help_handler = CommandHandler('help', help)
    echo_handler = MessageHandler(Filters.text & (~Filters.command), echo)
    random_film_handler = CommandHandler('randomfilm', get_random_film)
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('findfilm', start_conversation)],
        states={
            FIRST: [CallbackQueryHandler(choose_genre)],
            SECOND: [CallbackQueryHandler(get_filtered_film)]
        },
        fallbacks=[CommandHandler('findfilm', start_conversation)]
    )

    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(help_handler)
    dispatcher.add_handler(echo_handler)
    dispatcher.add_handler(random_film_handler)
    dispatcher.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    logging.basicConfig(
        format='%(asctime)s - %(levelname)s - %(message)s ['
        '%(filename)s:%(lineno)d - %(funcName)s]',
        level=logging.DEBUG,
        handlers=[logging.StreamHandler(sys.stdout)]
    )
    main()
