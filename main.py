import datetime
import logging
import os
import re
import sys
import requests

from http import HTTPStatus
from dotenv import load_dotenv
from telegram import (
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    Filters,
    MessageHandler,
    RegexHandler,
    Updater,
)

from utils.exceptions import HTTPRequestError
from utils.keyboards import (
    keyboard_film_genre,
    keyboard_film_type,
    keyboard_menu,
)

load_dotenv("tokens.env")

KINOPOISK_TOKEN = os.getenv('KINOPOISK_TOKEN')
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

HELP_COMMAND = """
<b>/start</b> - <em>–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞</em>
<b>/help</b> - <em>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</em>
<b>/findfilm</b> - <em>–ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª –∏—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π</em>
<b>/randomfilm</b> - <em>–ê–±—Å–æ–ª—é—Ç–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∏–ª—å–º</em>
"""


FIRST, SECOND, THIRD, FOURTH = range(4)


HEADERS = {'X-API-KEY': f'{KINOPOISK_TOKEN}'}
URL = ('https://api.kinopoisk.dev/v1.4/movie/random?notNullFields=name&'
       'notNullFields=description&notNullFields=type')


def check_tokens():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    source = ("KINOPOISK_TOKEN", "TELEGRAM_TOKEN", "TELEGRAM_CHAT_ID")
    missing_tokens = [token for token in source if not globals()[token]]

    if missing_tokens:
        error_message = (
            '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:'
            f'{", ".join(missing_tokens)}'
        )
        logging.critical(error_message)
        exit(error_message)


def start(update, context):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    name = update.message.chat.first_name
    chat = update.effective_chat
    context.bot.send_message(
        chat_id=chat.id,
        text=f'‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–∫–ª—é—á–∏–ª –º–µ–Ω—è, {name} !\n'
        '‚ùî –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help\n'
        '‚¨á –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é.'
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")


def help(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞."""
    chat = update.effective_chat
    context.bot.send_message(
        chat_id=chat.id,
        text=HELP_COMMAND,
        parse_mode='HTML'
    )


def translate_film_type(type):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–µ."""
    content_types = {
        'animated-series': '–º—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª',
        'anime': '–∞–Ω–∏–º–µ',
        'cartoon': '–º—É–ª—å—Ç—Ñ–∏–ª—å–º',
        'movie': '—Ñ–∏–ª—å–º',
        'tv-series': '—Å–µ—Ä–∏–∞–ª'
    }
    return content_types.get(type, type)


def generate_film_info(film_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ –æ—Ç API –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞."""
    genre_names = [
        genre.get("name") for genre in film_data.get("genres", [])
    ]
    kp_rating = film_data.get("rating", {}).get("kp")
    imdb_rating = film_data.get("rating", {}).get("imdb")
    kp_link = (
        f'<a href="https://www.kinopoisk.ru/film/{film_data.get("id")}">'
        f'–ö–∏–Ω–æ–ø–æ–∏—Å–∫: {kp_rating}</a>\n' if film_data.get("id")
        else f'–ö–∏–Ω–æ–ø–æ–∏—Å–∫: {kp_rating}\n'
    )
    imdb_link = (
        f'<a href="https://www.imdb.com/title/'
        f'{film_data.get("externalId").get("imdb")}">'
        f'IMDB: {imdb_rating}</a>\n' if film_data.get("externalId") and
        film_data.get("externalId").get("imdb")
        else f'IMDB: {imdb_rating}\n'
    )
    film_length = (
        f'<i>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</i> {film_data.get("movieLength")} –º–∏–Ω\n'
        if film_data.get("movieLength") else ''
    )
    film_info = (
        f'<b>{film_data.get("name")}</b>\n'
        '\n'
        f'{kp_link}'
        f'{imdb_link}'
        '\n'
        f'<i>–¢–∏–ø:</i> {translate_film_type(film_data.get("type"))}\n'
        f'<i>–ñ–∞–Ω—Ä:</i> {", ".join(genre_names)}\n'
        f'{film_length}'
        f'<i>–ì–æ–¥:</i> {film_data.get("year")}\n'
        '\n'
        f'{film_data.get("description")}\n'
    )
    return film_info


def get_random_film(
        update, context, genre=None, type=None, year=None, rating=None
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–∞–Ω–¥–æ–º–Ω–æ–º —Ñ–∏–ª—å–º–µ."""
    chat = update.effective_chat
    payload = {
        'type': type,
        'genres.name': genre,
        'year': year,
        'rating.kp': rating
    }

    try:
        response = requests.get(
            URL, params=payload if payload else None, headers=HEADERS
        )
        response.raise_for_status()
        film_data = response.json()

        if film_data:
            photo_url = film_data.get('poster', {}).get('previewUrl', None)
            film_info = generate_film_info(film_data)
            if photo_url:
                context.bot.send_photo(
                    chat.id, photo_url, caption=film_info, parse_mode='HTML'
                )
            else:
                context.bot.send_message(chat.id, film_info, parse_mode='HTML')
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ {URL} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {payload}")
        else:
            context.bot.send_message(
                chat.id,
                '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º–æ–≤ —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'
            )
            logging.warning("–§–∏–ª—å–º–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except requests.exceptions.RequestException:
        ConnectionError(
            f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É: {URL},'
            f'–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: {payload}.'
        )

        if response.status_code != HTTPStatus.OK:
            raise HTTPRequestError(response)
        return response.json()


def start_conversation(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞."""
    user = update.message.from_user
    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –Ω–∞—á–∞–ª –≤—ã–±–∏—Ä–∞—Ç—å —Ñ–∏–ª—å–º.')
    reply_markup = InlineKeyboardMarkup(keyboard_film_type)
    update.message.reply_text(
        '–°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä–µ–º —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ üòé\n'
        '–î–∞–≤–∞–π –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–µ–º, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:',
        reply_markup=reply_markup)
    return FIRST


def choose_genre(update, context):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∂–∞–Ω—Ä –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    query = update.callback_query
    query.answer()
    type = query.data
    context.user_data['type'] = type
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–∏–ø: {type}")
    reply_markup = InlineKeyboardMarkup(keyboard_film_genre)
    query.message.reply_text(
        '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:',
        reply_markup=reply_markup
    )
    return SECOND


def choose_year(update, context):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –≥–æ–¥ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    query = update.callback_query
    query.answer()
    genre = query.data
    if genre == 'skip_genre':
        context.user_data['genre'] = None
    else:
        context.user_data['genre'] = genre
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∂–∞–Ω—Ä: {genre}")
    query.message.reply_text(
        '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞(–Ω–∞–ø—Ä–∏–º–µ—Ä: 2020 –∏–ª–∏ 2020-2024):'
    )
    return THIRD


def choose_rating(update, context):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    year = update.message.text
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –≥–æ–¥: {year}")
    year_start_pattern = r"^(19[0-9]{2}|20[0-2][0-9])$"
    year_range_pattern = r"^(19[0-9]{2}|20[0-2][0-9])" + \
                         r"-(19[0-9]{2}|20[0-2][0-9])"
    pattern = "|".join([year_start_pattern, year_range_pattern])
    current_year = datetime.datetime.now().year

    if not re.match(pattern, year):
        update.message.reply_text(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞, –≤–≤–µ–¥–∏ –≥–æ–¥ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å'
            '(–Ω–∞–ø—Ä–∏–º–µ—Ä: 2020 –∏–ª–∏ 2020-2021).'
        )
        return THIRD

    if '-' in year:
        start_year, end_year = map(int, year.split('-'))
        if start_year > end_year:
            update.message.reply_text(
                '–ì–æ–¥ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ –≥–æ–¥–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è!'
            )
            return THIRD
        if start_year > current_year or end_year > current_year:
            update.message.reply_text(
                '–ì–æ–¥ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞!'
            )
            return THIRD
        context.user_data['year'] = year
    else:
        if int(year) > current_year:
            update.message.reply_text(
                '–í–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–≥–æ!'
            )
            return THIRD
        context.user_data['year'] = year

    update.message.reply_text(
        '–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º —Ä–µ–π—Ç–∏–Ω–≥, –≤–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å'
        '(–Ω–∞–ø—Ä–∏–º–µ—Ä: 7-10).'
    )
    return FOURTH


def get_filtered_film(update, context):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É."""
    rating_text = update.message.text
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ä–µ–π—Ç–∏–Ω–≥: {rating_text}")
    match = re.fullmatch(r'([1-9]|10)-([1-9]|10)', rating_text)

    if match is None:
        update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª, '
            '—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ñ–∏—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7-10).'
        )
        return FOURTH

    ratings = [float(rating) for rating in rating_text.split('-')]
    if len(ratings) == 2 and ratings[0] > ratings[1]:
        update.message.reply_text(
            '–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –≤–µ—Ä—Ö–Ω–µ–π. '
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω.'
        )
        return FOURTH

    try:
        context.user_data['rating'] = rating_text
        get_random_film(update=update,
                        context=context,
                        genre=context.user_data["genre"],
                        type=context.user_data["type"],
                        year=context.user_data['year'],
                        rating=context.user_data['rating'])
        reply_markup = ReplyKeyboardMarkup(
            keyboard_menu, resize_keyboard=True
        )
        update.message.reply_text(
            '–ï—Å–ª–∏ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å üòä',
            reply_markup=reply_markup
        )
        return ConversationHandler.END
    except ValueError:
        update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª, '
            '—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ñ–∏—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7-10).'
        )
        return FOURTH


def another_film(update, context):
    """–ù–∞—Ö–æ–¥–∏—Ç –µ—â–µ –æ–¥–∏–Ω —Ñ–∏–ª—å–º —Å —Ç–∞–∫–∏–º –∂–µ –∑–∞–ø—Ä–æ—Å–æ–º."""
    try:
        get_random_film(update=update,
                        context=context,
                        genre=context.user_data["genre"],
                        type=context.user_data["type"],
                        year=context.user_data['year'],
                        rating=context.user_data['rating'])
        reply_markup = ReplyKeyboardMarkup(keyboard_menu, resize_keyboard=True)
        update.message.reply_text(
            '–ï—Å–ª–∏ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å üòä',
            reply_markup=reply_markup
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞: {e}")
        update.message.reply_text(
            '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )


def cancel(update, context):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user = update.message.from_user
    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –æ—Ç–º–µ–Ω–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä.')
    update.message.reply_text(
        '–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    updater = Updater(token=TELEGRAM_TOKEN)
    dispatcher = updater.dispatcher

    start_handler = CommandHandler('start', start)
    help_handler = CommandHandler('help', help)
    random_film_handler = CommandHandler('randomfilm', get_random_film)
    main_menu_handler = RegexHandler('^–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$', cancel)
    another_film_handler = RegexHandler('^–ï—â–µ –æ–¥–∏–Ω$', another_film)
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('findfilm', start_conversation),
                      RegexHandler('^–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ$', start_conversation)],
        states={
            FIRST: [
                CallbackQueryHandler(choose_genre, pass_user_data=True),
            ],
            SECOND: [
                CallbackQueryHandler(choose_year, pass_user_data=True)
            ],
            THIRD: [
                MessageHandler(Filters.text & ~Filters.command,
                               choose_rating, pass_user_data=True)
            ],
            FOURTH: [
                MessageHandler(Filters.text & ~Filters.command,
                               get_filtered_film, pass_user_data=True)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(help_handler)
    dispatcher.add_handler(random_film_handler)
    dispatcher.add_handler(conv_handler)
    dispatcher.add_handler(main_menu_handler)
    dispatcher.add_handler(another_film_handler)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    logging.basicConfig(
        format='%(asctime)s - %(levelname)s - %(message)s ['
        '%(filename)s:%(lineno)d - %(funcName)s]',
        level=logging.DEBUG,
        handlers=[logging.StreamHandler(sys.stdout)]
    )
    main()
