import logging
import os
import re
import sys

import requests
from dotenv import load_dotenv
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    Filters,
    MessageHandler,
    RegexHandler,
    Updater,
)

load_dotenv("tokens.env")

KINOPOISK_TOKEN = os.getenv('KINOPOISK_TOKEN')
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

HELP_COMMAND = """
<b>/start</b> - <em>–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞</em>
<b>/help</b> - <em>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</em>
<b>/findfilm</b> - <em>–ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª –∏—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π</em>
<b>/randomfilm</b> - <em>–ê–±—Å–æ–ª—é—Ç–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∏–ª—å–º</em>
"""

CONTENT_TYPES = {
    'animated-series': '–º—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª',
    'anime': '–∞–Ω–∏–º–µ',
    'cartoon': '–º—É–ª—å—Ç—Ñ–∏–ª—å–º',
    'movie': '—Ñ–∏–ª—å–º',
    'tv-series': '—Å–µ—Ä–∏–∞–ª'
}


FIRST, SECOND, THIRD, FOURTH = range(4)


HEADERS = {'X-API-KEY': f'{KINOPOISK_TOKEN}'}
URL = 'https://api.kinopoisk.dev/v1.4/movie/random?notNullFields=name&notNullFields=description&notNullFields=type&notNullFields=year&notNullFields=movieLength'


def start(update, context):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    name = update.message.chat.first_name
    chat = update.effective_chat
    context.bot.send_message(
        chat_id=chat.id,
        text=f'‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–∫–ª—é—á–∏–ª –º–µ–Ω—è, {name} !\n'
        '‚ùî –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help\n'
        '‚¨á –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é.'
    )


def help(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞."""
    chat = update.effective_chat
    context.bot.send_message(
        chat_id=chat.id,
        text=HELP_COMMAND,
        parse_mode='HTML'
    )


def translate_film_type(type):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–µ."""
    return CONTENT_TYPES.get(type, type)


def generate_film_info(film_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ –æ—Ç API –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞."""
    genre_names = [genre.get("name") for genre in film_data.get("genres", [])]
    kp_rating = film_data.get("rating", {}).get("kp")
    imdb_rating = film_data.get("rating", {}).get("imdb")
    imdb_id = film_data.get("externalId").get("imdb") if "imdb" in film_data.get("externalId") else None
    film_info = (
        f'<b>{film_data.get("name")}</b>\n'
        '\n'
        f'<a href="https://www.kinopoisk.ru/film/{film_data.get("id")}">–ö–∏–Ω–æ–ø–æ–∏—Å–∫: {kp_rating}</a>\n'
        f'<a href="https://www.imdb.com/title/{film_data.get("externalId").get("imdb")}">IMDB: {imdb_rating}</a>\n'
        '\n'
        f'<i>–¢–∏–ø:</i> {translate_film_type(film_data.get("type"))}\n'
        f'<i>–ñ–∞–Ω—Ä:</i> {", ".join(genre_names)}\n'
        f'<i>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</i> {film_data.get("movieLength")} –º–∏–Ω\n'
        f'<i>–ì–æ–¥:</i> {film_data.get("year")}\n'
        '\n'
        f'{film_data.get("description")}\n'
    )
    return film_info


def get_random_film(
        update, context, genre=None, type=None, country=None, rating=None
        ):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–∞–Ω–¥–æ–º–Ω–æ–º —Ñ–∏–ª—å–º–µ."""
    chat = update.effective_chat
    payload = {
        'type': type,
        'genres.name': genre,
        'countries.name': country,
        'rating.kp': rating
    }
    film_data = requests.get(
        URL, params=payload if payload else None, headers=HEADERS
        ).json()

    if film_data:
        photo_url = film_data.get('poster', {}).get('previewUrl', None)
        film_info = generate_film_info(film_data)
        if photo_url:
            context.bot.send_photo(
                chat.id, photo_url, caption=film_info, parse_mode='HTML'
            )
        else:
            context.bot.send_message(chat.id, film_info, parse_mode='HTML')
    else:
        context.bot.send_message(
            chat.id,
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º–æ–≤ —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'
        )


def start_conversation(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∫ API."""
    user = update.message.from_user
    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –Ω–∞—á–∞–ª –±–µ—Å–µ–¥—É.')
    keyboard = [
        [
            InlineKeyboardButton('–§–∏–ª—å–º üé•', callback_data='movie'),
            InlineKeyboardButton('–°–µ—Ä–∏–∞–ª üì∫', callback_data='tv-series'),
        ],
        [
            InlineKeyboardButton('–ú—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª üëßüèª', callback_data='animated-series'),
            InlineKeyboardButton('–ú—É–ª—å—Ñ–∏–ª—å–º üë∂', callback_data='cartoon'),
            ],
        [
            InlineKeyboardButton('–ê–Ω–∏–º–µ üçú', callback_data='anime'),
        ],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        '–°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä–µ–º —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ üòé\n'
        '–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:',
        reply_markup=reply_markup)
    return FIRST


def choose_genre(update, context):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∂–∞–Ω—Ä –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    query = update.callback_query
    query.answer()
    type = query.data
    context.user_data['type'] = type
    keyboard = [
        [
            InlineKeyboardButton('–ö–æ–º–µ–¥–∏—è üòÇ', callback_data='–∫–æ–º–µ–¥–∏—è'),
            InlineKeyboardButton('–ë–æ–µ–≤–∏–∫ üî´', callback_data='–±–æ–µ–≤–∏–∫'),
            InlineKeyboardButton('–î—Ä–∞–º–∞ üò¢', callback_data='–¥—Ä–∞–º–∞')
        ],
        [
            InlineKeyboardButton('–£–∂–∞—Å—ã üò±', callback_data='—É–∂–∞—Å—ã'),
            InlineKeyboardButton('–î–µ—Ç–µ–∫—Ç–∏–≤ üïµÔ∏è‚Äç‚ôÇÔ∏è', callback_data='–¥–µ—Ç–µ–∫—Ç–∏–≤'),
            InlineKeyboardButton('–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ üëΩ', callback_data='—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞')
        ],
        [
            InlineKeyboardButton('–í–µ—Å—Ç–µ—Ä–Ω ü§†', callback_data='–≤–µ—Å—Ç–µ—Ä–Ω'),
            InlineKeyboardButton('–í–æ–µ–Ω–Ω—ã–π üéñÔ∏è', callback_data='–≤–æ–µ–Ω–Ω—ã–π'),
            InlineKeyboardButton('–§–µ–Ω—Ç–µ–∑–∏ üßô‚Äç‚ôÇÔ∏è', callback_data='—Ñ–µ–Ω—Ç–µ–∑–∏')
        ],
        [
            InlineKeyboardButton('–ò—Å—Ç–æ—Ä–∏—è üè∞', callback_data='–∏—Å—Ç–æ—Ä–∏—è'),
            InlineKeyboardButton('–ú–µ–ª–æ–¥—Ä–∞–º–∞ ‚ù§Ô∏è', callback_data='–º–µ–ª–æ–¥—Ä–∞–º–∞'),
            InlineKeyboardButton('–ö—Ä–∏–º–∏–Ω–∞–ª üöî', callback_data='–∫—Ä–∏–º–∏–Ω–∞–ª')
        ],
        [
            InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©', callback_data='skip_genre'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text(
        '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:',
        reply_markup=reply_markup
    )
    return SECOND


def choose_country(update, context):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–∞–Ω—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    query = update.callback_query
    query.answer()
    genre = query.data
    if genre == 'skip_genre':
        context.user_data['genre'] = None
    else:
        context.user_data['genre'] = genre
    query.message.reply_text('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:')
    return THIRD


def choose_rating(update, context):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    country = update.message.text
    context.user_data['country'] = country
    update.message.reply_text(
        '–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º —Ä–µ–π—Ç–∏–Ω–≥, –≤–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å, '
        '(–Ω–∞–ø—Ä–∏–º–µ—Ä: 7.2-10).')
    return FOURTH


def get_filtered_film(update, context):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–≤–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É."""
    try:
        rating_text = update.message.text
        match = re.fullmatch(
            r'(10|[1-9](\.[0-9]+)?)(-(10|[1-9](\.[0-9]+)?))?', rating_text
            )
        if match is not None:
            ratings = [float(rating) for rating in rating_text.split('-')]
            if len(ratings) == 2 and ratings[0] > ratings[1]:
                update.message.reply_text(
                    '–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –≤–µ—Ä—Ö–Ω–µ–π. '
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω.'
                    )
                return FOURTH
            context.user_data['rating'] = rating_text
            get_random_film(update=update,
                            context=context,
                            genre=context.user_data["genre"],
                            type=context.user_data["type"],
                            country=context.user_data['country'],
                            rating=context.user_data['rating'])
            keyboard = [
                [
                    KeyboardButton("–ï—â–µ –æ–¥–∏–Ω"),
                    KeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"),
                    KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                ]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            update.message.reply_text(
                '–ï—Å–ª–∏ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å üòä',
                reply_markup=reply_markup
            )
            return ConversationHandler.END
        else:
            update.message.reply_text(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª, '
                '—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ñ–∏—Å–æ–º (–ø—Ä–∏–º–µ—Ä: 7, 10, 7.2-10).'
                )
            return FOURTH
    except ValueError:
        update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª, '
            '—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ñ–∏—Å–æ–º (–ø—Ä–∏–º–µ—Ä: 7, 10, 7.2-10).'
            )
        return FOURTH


def another_film(update, context):
    """–ù–∞—Ö–æ–¥–∏—Ç –µ—â–µ –æ–¥–∏–Ω —Ñ–∏–ª—å–º —Å —Ç–∞–∫–∏–º –∂–µ –∑–∞–ø—Ä–æ—Å–æ–º."""
    get_random_film(update=update,
                    context=context,
                    genre=context.user_data["genre"],
                    type=context.user_data["type"],
                    country=context.user_data['country'],
                    rating=context.user_data['rating'])
    keyboard = [
        [
            KeyboardButton("–ï—â–µ –æ–¥–∏–Ω"),
            KeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"),
            KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        ]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(
        '–ï—Å–ª–∏ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å üòä',
        reply_markup=reply_markup
    )


def restart(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ."""
    start_conversation(update, context)


def cancel(update, context):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user = update.message.from_user
    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –æ—Ç–º–µ–Ω–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä.')
    update.message.reply_text('–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    return ConversationHandler.END


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    updater = Updater(token=TELEGRAM_TOKEN)
    dispatcher = updater.dispatcher

    start_handler = CommandHandler('start', start)
    help_handler = CommandHandler('help', help)
    random_film_handler = CommandHandler('randomfilm', get_random_film)
    main_menu_handler = RegexHandler('^–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$', cancel)
    restart_handler = RegexHandler('^–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ$', restart)
    another_film_handler = RegexHandler('^–ï—â–µ –æ–¥–∏–Ω$', another_film)
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('findfilm', start_conversation)],
        states={
            FIRST: [
                CallbackQueryHandler(choose_genre, pass_user_data=True)
                ],
            SECOND: [
                CallbackQueryHandler(choose_country, pass_user_data=True)
                ],
            THIRD: [
                MessageHandler(Filters.text & ~Filters.command,
                               choose_rating, pass_user_data=True)
                               ],
            FOURTH: [
                MessageHandler(Filters.text & ~Filters.command,
                               get_filtered_film, pass_user_data=True)
                               ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(help_handler)
    dispatcher.add_handler(random_film_handler)
    dispatcher.add_handler(conv_handler)
    dispatcher.add_handler(main_menu_handler)
    dispatcher.add_handler(restart_handler)
    dispatcher.add_handler(another_film_handler)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    logging.basicConfig(
        format='%(asctime)s - %(levelname)s - %(message)s ['
        '%(filename)s:%(lineno)d - %(funcName)s]',
        level=logging.DEBUG,
        handlers=[logging.StreamHandler(sys.stdout)]
    )
    main()
